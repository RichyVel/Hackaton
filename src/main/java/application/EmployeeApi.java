/**
 * NOTE: This class is auto generated by the swagger code generator program (2.2.3).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package application;

import application.model.Employee;

import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import java.io.IOException;

import java.util.List;
import org.springframework.validation.annotation.Validated;
import javax.validation.constraints.*;
import javax.validation.Valid;
@javax.annotation.Generated(value = "com.ibm.mobile.sdkgen.platform.JavaSpringBindingsConfig", date = "2019-01-26T19:20:01.818Z")

@Api(value = "employee", description = "the employee API")
public interface EmployeeApi {

    @ApiOperation(value = "Create employee", notes = "Create employee", response = Employee.class, tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation", response = Employee.class),
        @ApiResponse(code = 500, message = "Can't create employee data") })
    @RequestMapping(value = "/employee",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Employee> createEmployee(@ApiParam(value = "Employee data"  )  @Valid @RequestBody Employee employee, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Delete employee", notes = "Delete employee by id", response = Employee.class, tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Employee.class),
        @ApiResponse(code = 404, message = "Employee not found") })
    @RequestMapping(value = "/employee/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Employee> deleteEmployee(@ApiParam(value = "Employee id to delete",required=true ) @PathVariable("id") Long id, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Get employee", notes = "Get employee by id", response = Employee.class, tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Employee.class),
        @ApiResponse(code = 404, message = "Employee not found") })
    @RequestMapping(value = "/employee/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Employee> getEmployee(@ApiParam(value = "Employee id to retrieve details",required=true ) @PathVariable("id") Long id, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;


    @ApiOperation(value = "Update employee", notes = "Update employee", response = Employee.class, tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "successful operation", response = Employee.class),
        @ApiResponse(code = 500, message = "Can't update employee data") })
    @RequestMapping(value = "/employee",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Employee> updateEmployee(@ApiParam(value = "Employee data"  )  @Valid @RequestBody Employee employee, @RequestHeader(value = "Accept", required = false) String accept) throws Exception;

}
